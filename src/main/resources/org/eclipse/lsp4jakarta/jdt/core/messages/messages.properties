# /*******************************************************************************
# * Copyright (c) 2022, 2024 IBM Corporation and others.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Eclipse Public License v. 2.0 which is available at
# * http://www.eclipse.org/legal/epl-2.0.
# *
# * SPDX-License-Identifier: EPL-2.0
# *******************************************************************************/

# NLS_MESSAGEFORMAT_VAR
# NLS_ENCODING=UNICODE

# AnnotationDiagnosticsCollector
AnnotationMustDefineAttribute = The {0} annotation must define the attribute ''{1}''.
AnnotationMustDefineAttributeFollowing8601 = The {0} annotation must define the attribute ''{1}'' following the ISO 8601 standard.
MethodMustNotHaveParameters = A method with the {0} annotation must not have any parameters.
MethodMustBeVoid = A method with the {0} annotation must be void.
MethodMustNotBeStatic = A method with the {0} annotation must not be static.
MethodMustNotThrow = A method with the {0} annotation must not throw checked exceptions.

# HttpServletQuickFix
LetClassExtend = Let ''{0}'' extend ''{1}''

# FilterImplementationQuickFix
LetClassImplement = Let ''{0}'' implement ''{1}''

# InsertAnnotationAttributesQuickFix
AddAtoB = Add {0} to {1}

# InsertAnnotationMissingQuickFix
InsertItem = Insert {0}

# RemoveAnnotationConflictQuickFix
RemoveItem = Remove {0}

# RemoveParamAnnotationQuickFix
RemoveTheModifierFromParameter = Remove the {0} modifier from parameter ''{1}''

# RemoveModifierConflictQuickFix
RemoveTheModifierFromThisVariable = Remove the ''{0}'' modifier from this variable
RemoveTheModifierFromThisField = Remove the ''{0}'' modifier from this field
RemoveTheModifierFromThisMethod = Remove the ''{0}'' modifier from this method
RemoveTheModifierFromThisClass = Remove the ''{0}'' modifier from this class
RemoveTheModifierFromThis = Remove the ''{0}'' modifier from this {1}

# RemoveMethodParametersQuickFix
RemoveAllParameters = Remove all parameters

# PostConstructReturnTypeQuickFix
ChangeReturnTypeToVoid = Change return type to void

# BeanValidationQuickFix
RemoveConstraintAnnotation = Remove constraint annotation {0} from element
RemoveStaticModifier = Remove static modifier from element

# BeanValidationDiagnosticsCollector
ConstraintAnnotationsMethod = Constraint annotations are not allowed on static methods.
ConstraintAnnotationsField = Constraint annotations are not allowed on static fields.
AnnotationBooleanMethods = The {0} annotation can only be used on boolean and Boolean type methods.
AnnotationBooleanFields = The {0} annotation can only be used on boolean and Boolean type fields.
AnnotationBigDecimalMethods= The {0} annotation can only be used on: \n- BigDecimal \n- BigInteger \n- CharSequence\n- byte, short, int, long (and their respective wrappers) \n type methods.
AnnotationBigDecimalFields= The {0} annotation can only be used on: \n- BigDecimal \n- BigInteger \n- CharSequence\n- byte, short, int, long (and their respective wrappers) \n type fields.
AnnotationStringMethods = The {0} annotation can only be used on String and CharSequence type methods.
AnnotationStringFields = The {0} annotation can only be used on String and CharSequence type fields.
AnnotationDateMethods = The {0} annotation can only be used on: Date, Calendar, Instant, LocalDate, LocalDateTime, LocalTime, MonthDay, OffsetDateTime, OffsetTime, Year, YearMonth, ZonedDateTime, HijrahDate, JapaneseDate, JapaneseDate, MinguoDate and ThaiBuddhistDate type methods.
AnnotationDateFields = The {0} annotation can only be used on: Date, Calendar, Instant, LocalDate, LocalDateTime, LocalTime, MonthDay, OffsetDateTime, OffsetTime, Year, YearMonth, ZonedDateTime, HijrahDate, JapaneseDate, JapaneseDate, MinguoDate and ThaiBuddhistDate type fields.
# The next two messages do not include CharSequence
AnnotationMinMaxMethods = The {0} annotation can only be used on \n- BigDecimal \n- BigInteger\n- byte, short, int, long (and their respective wrappers) \n type methods.
AnnotationMinMaxFields = The {0} annotation can only be used on \n- BigDecimal \n- BigInteger\n- byte, short, int, long (and their respective wrappers) \n type fields.
# The next two messages include float and double
AnnotationPositiveMethods = The {0} annotation can only be used on \n- BigDecimal \n- BigInteger\n- byte, short, int, long, float, double (and their respective wrappers) \n type methods.
AnnotationPositiveFields = The {0} annotation can only be used on \n- BigDecimal \n- BigInteger\n- byte, short, int, long, float, double (and their respective wrappers) \n type fields.

# ManagedBeanDiagnosticsCollector
ScopeTypeAnnotationsManagedBean = Scope type annotations must be specified by a managed bean class at most once.
ScopeTypeAnnotationsProducerField = Scope type annotations must be specified by a producer field at most once.
ScopeTypeAnnotationsProducerMethod = Scope type annotations must be specified by a producer method at most once.
ManagedBeanWithNonStaticPublicField = The @Dependent annotation must be the only scope defined by a managed bean with a non-static public field.
ManagedBeanConstructorWithParameters = The @Inject annotation must define a managed bean constructor that takes parameters, or the managed bean must resolve to having a no-arg constructor instead.
ManagedBeanDisposeOneParameter = The @Disposes annotation must not be defined on more than one parameter of a method.
ManagedBeanInvalidDisposer = A disposer method cannot have parameter(s) annotated with {0}.
ManagedBeanInvalidProduces = A producer method cannot have parameter(s) annotated with {0}.
ManagedBeanInvalidInject = A bean constructor or a method annotated with @Inject cannot have parameter(s) annotated with {0}.
ManagedBeanGenericType = Managed bean class of generic type must have scope @Dependent.
ManagedBeanProducesAndInject = The @Produces and @Inject annotations must not be used on the same field or property.

# ManagedBeanNoArgConstructorQuickFix
AddProtectedConstructor = Add a no-arg protected constructor to this class
AddPublicConstructor = Add a no-arg public constructor to this class

# ManagedBeanQuickFix
ReplaceCurrentScope = Replace current scope with {0}

# DependencyInjectionDiagnosticsCollector
InjectNoFinalField = The @Inject annotation must not define a final field.
InjectNoFinalMethod = The @Inject annotation must not define a final method.
InjectNoAbstractMethod = The @Inject annotation must not define an abstract method.
InjectNoStaticMethod = The @Inject annotation must not define a static method.
InjectNoGenericMethod = The @Inject annotation must not define a generic method.
InjectMoreThanOneConstructor = The @Inject annotation must not define more than one constructor.

# Jax_RSClassDiagnosticsCollector
RootResourceClasses = Root resource classes are instantiated by the JAX-RS runtime and MUST have a public constructor.
ProviderClasses = Provider classes are instantiated by the JAX-RS runtime and MUST have a public constructor.
ConstructorIsUnused = This constructor is unused, as root resource classes will only use the constructor with the most parameters.
MultipleConstructorsNumberOfParameters = Multiple constructors have the same number of parameters, it might be ambiguous which constructor is used.

# NonPublicResourceMethodQuickFix
MakeMethodPublic = Make method public

# NoResourcePublicConstructorQuickFix
MakeConstructorPublic = Make constructor public
NoargPublicConstructor = Add a default 'public' constructor to this class

# ResourceMethodDiagnosticsCollector
OnlyPublicMethods = Only public methods can be exposed as resource methods.
ResourceMethodsEntityParameter = Resource methods cannot have more than one entity parameter.

# ResourceMethodMultipleEntityParamsQuickFix
RemoveAllEntityParametersExcept = Remove all entity parameters except {0}

# JsonbDiagnosticsCollector
ErrorMessageJsonbCreator = Only one constructor or static factory method can be annotated with @JsonbCreator in a given class.
ErrorMessageJsonbTransientOnField = When a class field is annotated with @JsonbTransient, this field, getter or setter must not be annotated with other JSON Binding annotations.
ErrorMessageJsonbTransientOnAccessor = When an accessor is annotated with @JsonbTransient, its field or the accessor must not be annotated with other JSON Binding annotations.

# JsonpDiagnosticCollector
CreatePointerErrorMessage = Json.createPointer target must be a sequence of '/' prefixed tokens or an empty String.

# PersistenceAnnotationQuickFix
AddTheMissingAttributes = Add the missing attributes to the @MapKeyJoinColumn annotation

# PersistenceEntityDiagnosticsCollector
EntityNoFinalMethods = A class using the @Entity annotation cannot contain any methods that are declared final.
EntityNoFinalVariables = A class using the @Entity annotation cannot contain any persistent instance variables that are declared final.
EntityNoArgConstructor = A class using the @Entity annotation must contain a public or protected constructor with no arguments.
EntityNoFinalClass = A class using the @Entity annotation must not be final.

# PersistenceEntityQuickFix
AddNoArgProtectedConstructor = Add a no-arg protected constructor to this class
AddNoArgPublicConstructor = Add a no-arg public constructor to this class

# PersistenceMapKeyDiagnosticsCollector
MapKeyAnnotationsNotOnSameField = @MapKeyClass and @MapKey annotations cannot be used on the same field or property.
MultipleMapKeyJoinColumnMethod = A method with multiple @MapKeyJoinColumn annotations must specify both the name and referencedColumnName attributes in the corresponding @MapKeyJoinColumn annotations.
MultipleMapKeyJoinColumnField = A field with multiple @MapKeyJoinColumn annotations must specify both the name and referencedColumnName attributes in the corresponding @MapKeyJoinColumn annotations.

# CompleteFilterAnnotationQuickFix
AddTheAttributeTo = Add the `{0}` attribute to {1}
RemoveTheAttributeFrom = Remove the `{0}` attribute from {1}

# FilterDiagnosticsCollector
WebFilterMustImplement = Annotated classes with @WebFilter must implement the Filter interface.
WebFilterMustDefine = The annotation @WebFilter must define the attribute 'urlPatterns', 'servletNames' or 'value'.
WebFilterCannotHaveBoth = The annotation @WebFilter can not have both 'value' and 'urlPatterns' attributes specified at once.

# ListenerDiagnosticsCollector
AnnotatedWithWebListenerMustImplement = Annotated classes with @WebListener must implement one or more of the following interfaces: ServletContextListener, ServletContextAttributeListener, ServletRequestListener, ServletRequestAttributeListener, HttpSessionListener, HttpSessionAttributeListener, or HttpSessionIdListener.

# ServletDiagnosticsCollector
WebServletMustExtend = Annotated classes with @WebServlet must extend the HttpServlet class.
WebServletShouldExtend = Annotated classes with @WebServlet should extend the HttpServlet class.
WebServletMustDefine = The @WebServlet annotation must define the attribute 'urlPatterns' or 'value'.
WebServletCannotHaveBoth = The @WebServlet annotation cannot have both 'value' and 'urlPatterns' attributes specified at once.

# WebSocketDiagnosticsCollector
WebSocketParamType = Invalid parameter type. When using {0}, parameter must be of type: \n- {1}\n- annotated with @PathParams and of type String or any Java primitive type or boxed version thereof.
PathParamsAnnotationMissing = Parameters of type String, any Java primitive type, or boxed version thereof must be annotated with @PathParams.
PathParamWarning = PathParam value does not match specified Endpoint URI.
OnMessageDuplicateMethod = Classes annotated with @ServerEndpoint or @ClientEndpoint must have only one @OnMessage annotated method for each of the native WebSocket message formats: text, binary and pong.
ServerEndpointNoSlash = Server endpoint paths must start with a leading '/'.
ServerEndpointRelative = Server endpoint paths must not contain the sequences '/../', '/./' or '//'.
ServerEndpointNotLevel1 = Server endpoint paths must be a URI-template (level-1) or a partial URI.
ServerEndpointDuplicateVar = Server endpoint paths must not use the same variable more than once in a path.
